class PreProFuzzy(builtins.object)
 |  Methods defined here:
 |  
 |  __init__(self, pd, attribute, crs, nodatavalue, res=None, ulc=(nan, nan), lrc=(nan, nan))
 |      Performing pre-processing
 |      :param pd: pandas dataframe, can be obtained by reading the textfile as pandas dataframe
 |      :param attribute: string, name of the attribute to burn in the raster (ex.: deltaZ, Z)
 |      :param crs: string, coordinate reference system
 |      :param nodatavalue: float, value to indicate nodata cells
 |      :param res: float, resolution of the cell (cell size), is the same for x and y
 |      :param ulc: tuple of floats, upper left corner coordinate, optional
 |      :param lrc: tuple of floats, lower right corner coordinate, optional
 |  
 |  array2raster(self, array, raster_file, save_ascii=True)
 |      Saves a raster using interpolation
 |      :param raster_file: string, path to save the rasterfile
 |      :param save_ascii: boolean, true to save also an ascii raster
 |      :return: saves the raster with the selected filename
 |  
 |  create_polygon(self, shape_polygon, alpha=nan)
 |      Creates a polygon surrounding a cloud of shapepoints
 |      :param shape_polygon: string, path to save the shapefile
 |      :param alpha: float, excentricity of the alphashape (polygon) to be created
 |      :return: saves the polygon (*.shp) with the selected filename
 |  
 |  norm_array(self, method='linear')
 |      Normalizes the raw data in equally sparsed points depending on the selected resolution
 |      :return: interpolated and normalized array with selected resolution
 |      
 |      https://github.com/rosskush/skspatial
 |  
 |  plain_raster(self, shapefile, raster_file, res)
 |      Converts shapefile(.shp) to rasters(.tif) without normalizing
 |      :param shapefile: string, filename with path of the input shapefile (*.shp)
 |      :param raster_file: stirng, filename with path of the output raster (*.tif)
 |      :param res: float, resolution of the cell
 |      :return: saves the raster in the default directory
 |  
 |  points_to_grid(self)
 |      Creates a grid of new points in the desired resolution to be interpolated
 |      :return: array of size nrow, ncol
 |      
 |      http://chris35wills.github.io/gridding_data/
 |  
 |  random_raster(self, raster_file, save_ascii=True, **kwargs)
 |      Creates a raster of randomly generated values
 |      :kwarg minmax: tuple of floats, (zmin, zmax) min and max ranges for random values
 |      :return: array of random values within a range of the same size and chape as the original
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)

None
Help on class PreProCategorization in module __main__:



class PreProCategorization(builtins.object)
 |  Methods defined here:
 |  
 |  __init__(self, raster)
 |      Clips a raster based on the given polygon
 |      :param raster: string, path of the raster to be categorized
 |  
 |  categorize_raster(self, class_bins, map_out, save_ascii=True)
 |      Classifies the raster according to the classification bins
 |      :param project_dir: path of the project directory
 |      :param class_bins: list of floats,
 |      :return: saves the classified raster in the chosen directory
 |  
 |  nb_classes(self, n_classes)
 |      Generates class bins based on the Natural Breaks method
 |      :param n_classes: integer, number of classes
 |      :return: list, optimized bins
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)